// <auto-generated />
using System;
using E_Website.Models.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace E_Website.Migrations
{
    [DbContext(typeof(ModelContext))]
    partial class ModelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("E_Website.Models.applicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("NUMBER(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("firstName")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("lastName")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("\"NormalizedUserName\" IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("E_Website.Models.category", b =>
                {
                    b.Property<string>("categoryId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("icon")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("name")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("categoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("E_Website.Models.order", b =>
                {
                    b.Property<string>("orderId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("orderDetailsId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("state")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<decimal>("total")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.Property<string>("userId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("userName")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("orderId");

                    b.HasIndex("orderDetailsId");

                    b.HasIndex("userId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("E_Website.Models.orderDetails", b =>
                {
                    b.Property<string>("orderDetailsId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("name")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("orderId")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<decimal>("price")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.Property<string>("productId")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("quantity")
                        .HasColumnType("NUMBER(10)");

                    b.Property<decimal>("total")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.HasKey("orderDetailsId");

                    b.ToTable("orderDetails");
                });

            modelBuilder.Entity("E_Website.Models.product", b =>
                {
                    b.Property<string>("productId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("categoryId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("createdAt")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("description")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<decimal?>("discount")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.Property<string>("image")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("name")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("orderDetailsId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<decimal>("price")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.Property<int>("quantity")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("updatedAt")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("productId");

                    b.HasIndex("categoryId");

                    b.HasIndex("orderDetailsId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("E_Website.Models.productImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("image")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("productId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("Id");

                    b.HasIndex("productId");

                    b.ToTable("productImages");
                });

            modelBuilder.Entity("E_Website.Models.userCard", b =>
                {
                    b.Property<string>("userCardId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("cardName")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("cardNumber")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("cvv")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("expiryMonth")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("expiryYear")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("userId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<int>("wallet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(1000);

                    b.HasKey("userCardId");

                    b.HasIndex("userId")
                        .IsUnique()
                        .HasFilter("\"userId\" IS NOT NULL");

                    b.ToTable("userCards");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("\"NormalizedName\" IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("Name")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("Value")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("E_Website.Models.order", b =>
                {
                    b.HasOne("E_Website.Models.orderDetails", null)
                        .WithMany("order")
                        .HasForeignKey("orderDetailsId");

                    b.HasOne("E_Website.Models.applicationUser", "user")
                        .WithMany("orders")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("user");
                });

            modelBuilder.Entity("E_Website.Models.product", b =>
                {
                    b.HasOne("E_Website.Models.category", "category")
                        .WithMany("product")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("E_Website.Models.orderDetails", null)
                        .WithMany("product")
                        .HasForeignKey("orderDetailsId");

                    b.Navigation("category");
                });

            modelBuilder.Entity("E_Website.Models.productImage", b =>
                {
                    b.HasOne("E_Website.Models.product", "product")
                        .WithMany("productImages")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("product");
                });

            modelBuilder.Entity("E_Website.Models.userCard", b =>
                {
                    b.HasOne("E_Website.Models.applicationUser", "user")
                        .WithOne("userCard")
                        .HasForeignKey("E_Website.Models.userCard", "userId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("user");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("E_Website.Models.applicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("E_Website.Models.applicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Website.Models.applicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("E_Website.Models.applicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_Website.Models.applicationUser", b =>
                {
                    b.Navigation("orders");

                    b.Navigation("userCard");
                });

            modelBuilder.Entity("E_Website.Models.category", b =>
                {
                    b.Navigation("product");
                });

            modelBuilder.Entity("E_Website.Models.orderDetails", b =>
                {
                    b.Navigation("order");

                    b.Navigation("product");
                });

            modelBuilder.Entity("E_Website.Models.product", b =>
                {
                    b.Navigation("productImages");
                });
#pragma warning restore 612, 618
        }
    }
}
